#!/usr/bin/env python
"""
Скрипт для тестирования улучшенной системы тегирования на разных примерах разговоров.
"""
import json
from tagging import generate_tags

# Примеры разговоров на разные темы
test_conversations = {
    "техническое": """
    Давайте обсудим проблему с сервером. Он не отвечает уже второй день, и это влияет на работу всех наших сервисов.
    Нам нужно разобраться, почему это происходит, и найти решение как можно скорее.
    Возможно, проблема связана с последним обновлением, которое мы установили на прошлой неделе.
    Я смотрел логи и заметил ошибки при подключении к базе данных.
    """,
    
    "планирование": """
    На следующую неделю у нас запланировано три важных встречи. 
    В понедельник в 10:00 созвон с клиентом по поводу новых требований к проекту.
    В среду необходимо подготовить презентацию для инвесторов, а в пятницу у нас демонстрация продукта.
    Давайте распределим задачи между членами команды и создадим четкий график работы.
    Нам важно не пропустить дедлайны и подготовить все материалы вовремя.
    """,
    
    "брейншторм": """
    Давайте придумаем новые идеи для нашего приложения. Что если добавить функцию распознавания голоса?
    Или может быть, интегрировать с социальными сетями? Какие ещё есть варианты улучшения пользовательского опыта?
    Я думаю, нам стоит смотреть в сторону искусственного интеллекта - можно добавить умные рекомендации на основе 
    предпочтений пользователя. А как насчет геймификации? Все любят соревноваться и получать награды.
    Выскажите ваши идеи, даже самые необычные - мы рассмотрим все варианты.
    """,
    
    "обучение": """
    Сегодня я хочу объяснить вам, как работает система контроля версий Git.
    Git - это распределенная система контроля версий, которая позволяет нескольким людям работать над проектом одновременно.
    Основные команды, которые нужно знать: git clone, git add, git commit, git push, git pull и git merge.
    Давайте разберем каждую из них подробнее и посмотрим примеры использования.
    После этого потренируемся на практике - создадим репозиторий и попробуем работать с ветками.
    """,
    
    "отчет": """
    Подвожу итоги месяца по нашему проекту. За последние 30 дней мы выполнили 87% запланированных задач.
    Основные достижения: запустили новую версию приложения, привлекли 500 новых пользователей и исправили 35 критических ошибок.
    Метрики показывают рост вовлеченности на 12% и увеличение времени использования приложения в среднем на 7 минут.
    Однако есть и проблемы - мы не успели реализовать интеграцию с API партнеров, и это переходит на следующий месяц.
    Расходы остались в пределах бюджета, но мы приближаемся к его лимиту.
    """,
    
    "смешанный": """
    У нас проблема с сервером базы данных, и нам нужно срочно это исправить. Давайте спланируем, как мы будем решать этот вопрос.
    Во-первых, нужно разобраться в причинах - возможно, это связано с последним обновлением. Во-вторых, составить план действий.
    Я предлагаю провести мозговой штурм, чтобы придумать все возможные решения, а затем выбрать оптимальное.
    Также нам нужно будет отчитаться перед руководством о причинах проблемы и предпринятых мерах.
    И не забудьте, в пятницу у нас запланирована встреча с клиентом, нужно к ней подготовиться.
    """
}

def test_tagging_system():
    """Тестирует систему тегирования на различных примерах разговоров."""
    print("=== Тестирование улучшенной системы тегирования ===\n")
    
    for conversation_type, text in test_conversations.items():
        print(f"\n== Тип разговора: {conversation_type} ==")
        
        # Генерируем теги
        tags = generate_tags(text)
        
        # Выводим результаты
        print(f"Ключевые слова: {tags['keywords']}")
        print(f"Ключевые фразы: {tags['keyphrases']}")
        print(f"Категории: {tags['categories']}")
        print(f"Назначение: {tags['purpose']}")
        print(f"Темы: {tags['topics']}")
        
        # Выводим детали назначения
        print("\nВероятности назначения:")
        for purpose, probability in sorted(tags['purpose_details']['purpose_probabilities'].items(), 
                                           key=lambda x: x[1], reverse=True):
            if probability > 0:
                print(f"  - {purpose}: {probability:.1f}%")
    
    print("\n=== Тестирование завершено ===")

if __name__ == "__main__":
    test_tagging_system() 